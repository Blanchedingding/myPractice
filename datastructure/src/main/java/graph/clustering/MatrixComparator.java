package graph.clustering;

import smile.clustering.SpectralClustering;

import java.io.*;
import java.util.*;

public class MatrixComparator {

    final int N = 22;

    public boolean readMatrix(String fileName){
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            double[][][] x = new double[2][N][N];
            int i = 0;
            int k = 0;
            while ((line = reader.readLine()) != null ) {
                if(line.trim().split(" ").length < 22) {
                    if(k == 0){
                        k ++;
                        i = 0;
                    }
                    continue;
                }
                String[] d = line.split(" ");
                for(int j = 0; j < 22; j++){
                    x[k][i][j] = Double.valueOf(d[j]);
                }
                i++;
            }
            printG(x[0]);
            cluster(x[0], 4);
            cluster(x[0], 4);
            System.out.println("-------------------------------------");
            printG(x[1]);
            return compare(x[0],x[1]);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public void cluster(double[][] G, int k){
        Map<Integer, List<Integer>> clusters = new HashMap<>();
        SpectralClustering sc = new SpectralClustering(G, k);
        for(int i = 0; i < sc.getNumClusters(); i ++){
            clusters.put(i, new ArrayList<>());
        }
        int[] labels = sc.getClusterLabel();
        for(int i = 0; i < labels.length; i++){
            clusters.get(labels[i]).add(i);
        }
        System.out.println("----clusters:----");
        System.out.println(clusters);
    }

    public boolean compare(double[][] a, double[][] b){
        for(int i = 0; i < N; i ++){
            for (int j = 0; j < N; j++){
                if(a[i][j] != b[i][j]){
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
//        MatrixComparator m = new MatrixComparator();
//        System.out.println(m.readMatrix("F:\\gitwork\\myPractice\\datastructure\\src\\main\\java\\graph\\clustering\\matrix.txt"));
    double[][] G = new double[][]{
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7839643652561246E-4, 2.7839643652561246E-4, 0.0019466975666280419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05714285714285714, 0.05714285714285714 },
            { 0.0, 0.0, 1.3380554497041546, 0.0634907226171322, 0.006728950258433113, 0.008349020647374871, 0.005832527122043176, 0.0, 0.1508988640123525, 0.15743724213530974, 0.07965053347504078, 0.07041159812056029, 0.6908174282785178, 1.2645559482120954, 0.33033781832624026, 0.1833990741160323, 0.0, 0.30140625688020667, 0.18110978649121645, 0.0, 0.0, 0.0 },
            { 0.0, 1.3380554497041546, 0.0, 0.08890589622552744, 0.01897420918472203, 0.009612509221142963, 0.012073907580765517, 0.0, 0.1409426462237365, 0.14873480714349063, 0.06314934332507936, 0.08442115379748595, 0.8428918062410671, 1.4166923393742263, 0.3778766490436605, 0.20519487205497827, 0.0, 0.11631590857660104, 0.1308220921354034, 0.0052671324085584, 0.0, 0.0 },
            { 0.0, 0.0634907226171322, 0.08890589622552744, 0.0, 0.09767880287498527, 0.146159509202454, 0.08548268238761975, 0.0, 0.0021130480718436345, 0.0021130480718436345, 0.023174971031286212, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.006728950258433113, 0.01897420918472203, 0.09767880287498527, 0.0, 0.4539606540290535, 0.9209708895755407, 0.0, 0.001624225739848589, 0.001624225739848589, 0.007972190034762457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4066189624329159, 0.0, 0.0 },
            { 0.0, 0.008349020647374871, 0.009612509221142963, 0.146159509202454, 0.4539606540290535, 0.0, 0.516394903323532, 0.0, 0.0011061946902654867, 0.0011061946902654867, 0.005561993047508691, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.005832527122043176, 0.012073907580765517, 0.08548268238761975, 0.9209708895755407, 0.516394903323532, 0.0, 0.0, 5.230557467309015E-4, 5.230557467309015E-4, 0.00611819235225956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5867243867243868, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.618146395769552E-4, 3.618146395769552E-4, 0.002178447276940904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7839643652561246E-4, 0.1508988640123525, 0.1409426462237365, 0.0021130480718436345, 0.001624225739848589, 0.0011061946902654867, 5.230557467309015E-4, 3.618146395769552E-4, 0.0, 1.481090599951421, 0.042405665363069445, 0.011884787472035795, 0.13758970551843605, 0.13512993262752646, 0.14274132252343552, 0.14570230607966458, 0.00488599348534202, 0.1487125591171834, 0.14373601789709173, 5.288796102992345E-4, 0.0, 0.0 },
            { 2.7839643652561246E-4, 0.15743724213530974, 0.14873480714349063, 0.0021130480718436345, 0.001624225739848589, 0.0011061946902654867, 5.230557467309015E-4, 3.618146395769552E-4, 1.481090599951421, 0.0, 0.042405665363069445, 0.011884787472035795, 0.13758970551843605, 0.13512993262752646, 0.14274132252343552, 0.14570230607966458, 0.00488599348534202, 0.1487125591171834, 0.14373601789709173, 5.288796102992345E-4, 0.0, 0.0 },
            { 0.0019466975666280419, 0.07965053347504078, 0.06314934332507936, 0.023174971031286212, 0.007972190034762457, 0.005561993047508691, 0.00611819235225956, 0.002178447276940904, 0.042405665363069445, 0.042405665363069445, 0.0, 0.01969872537659328, 0.028556319407720784, 0.03460602855631941, 0.026144896879957698, 0.019037546271813855, 0.015359999999999999, 0.019337887545980034, 0.0, 0.0024101969872537665, 5.561993047508691E-4, 5.561993047508691E-4 },
            { 0.0, 0.07041159812056029, 0.08442115379748595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011884787472035795, 0.011884787472035795, 0.01969872537659328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.6908174282785178, 0.8428918062410671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13758970551843605, 0.13758970551843605, 0.028556319407720784, 0.0, 0.0, 0.9154771475543534, 0.2437545482354976, 0.2289165443095669, 0.0, 0.13761713520749666, 0.1583975346687211, 0.0, 0.0, 0.0 },
            { 0.0, 1.2645559482120954, 1.4166923393742263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13512993262752646, 0.13512993262752646, 0.03460602855631941, 0.0, 0.9154771475543534, 0.0, 0.4174638956046289, 0.2330969863168342, 0.0, 0.1325425477050026, 0.23438546128096674, 0.0, 0.0, 0.0 },
            { 0.0, 0.33033781832624026, 0.3778766490436605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274132252343552, 0.14274132252343552, 0.026144896879957698, 0.0, 0.2437545482354976, 0.4174638956046289, 0.0, 0.3786793986801441, 0.0, 0.1397498640565525, 0.1612296110414053, 0.0, 0.0, 0.0 },
            { 0.0, 0.1833990741160323, 0.20519487205497827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14570230607966458, 0.14570230607966458, 0.019037546271813855, 0.0, 0.2289165443095669, 0.2330969863168342, 0.3786793986801441, 0.0, 0.0, 0.14643874643874644, 0.17019867549668877, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00488599348534202, 0.00488599348534202, 0.015359999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.30140625688020667, 0.11631590857660104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1487125591171834, 0.1487125591171834, 0.019337887545980034, 0.0, 0.13761713520749666, 0.1325425477050026, 0.1397498640565525, 0.14643874643874644, 0.0, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0 },
            { 0.0, 0.18110978649121645, 0.1308220921354034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14373601789709173, 0.14373601789709173, 0.0, 0.0, 0.1583975346687211, 0.23438546128096674, 0.1612296110414053, 0.17019867549668877, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0052671324085584, 0.0, 0.4066189624329159, 0.0, 0.5867243867243868, 0.0, 5.288796102992345E-4, 5.288796102992345E-4, 0.0024101969872537665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2 },
            { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0 }
    };


        //调整共享度高的表的边权重
        List<Set<Integer>> sharingClusters = new ArrayList<>();
        Set<Integer> s1 = new HashSet<>();
        s1.add(0);s1.add(8);
        Set<Integer> s2 = new HashSet<>();
        s2.add(3);s2.add(4);
        sharingClusters.add(s1);
        sharingClusters.add(s2);

        for(Set<Integer> sc: sharingClusters){
            //group里面的两table之间边不变，其他的与该group中table两连的边权重减为原来的20%
            if(sc.size() > 1){
                for(int i = 0; i < 22; i++){
                    if(sc.contains(i)){
                        for(int j = 0; j < 22; j++){
                            if( G[i][j] > 0 && !sc.contains(j)){
                                //TODO: need to change a proper strategy
                                System.out.println("[" + i + " " + j + "]");
                                G[i][j] *= 0.2;
                            }
                        }
                    }
                }
            }
        }

        printG(G);

    }


    public static void printG(double[][] G){
        int n = G.length;
        for(int i = 0; i < n; i++){
            System.out.print("{ ");
            for(int j = 0; j < n;j++){
                if(j != n-1) System.out.print(G[i][j] + ", ");
                else System.out.print(G[i][j]);
            }
            System.out.println(" },");
        }
        System.out.println("----------------");
    }
}
