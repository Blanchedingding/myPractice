package graph.clustering;

import graph.clustering.fastNewman.FastNewmanAlgothrim;
import graph.clustering.louvain.CommunityDetectionAlgorithm;
import graph.clustering.louvain.Louvain;
import smile.clustering.SpectralClustering;

import java.util.*;
import java.util.stream.Collectors;

public class MockTestData {

    public static void spectralClusterint(double[][] G, int k, List<String> tableList){
        Map<Integer, List<Integer>> clusters = new HashMap<>();
        SpectralClustering sc = new SpectralClustering(G, k);
        for(int i = 0; i < sc.getNumClusters(); i ++){
            clusters.put(i, new ArrayList<>());
        }
        int[] labels = sc.getClusterLabel();
        for(int i = 0; i < labels.length; i++){
            clusters.get(labels[i]).add(i);
        }

        Map<Integer, List<String>> result = new HashMap<>();
        translateResult(clusters, result, 1, tableList);
    }

    public static void fastNewman(double[][] G, int k, List<String> tableList){
        for(int i = 0; i < G.length; i++){
            for(int j = 0; j < G[0].length; j++){
                G[i][j] *= 10000;
            }
        }
        FastNewmanAlgothrim f = new FastNewmanAlgothrim(G, k);
        f.calculate();
        Map<Integer, Map<Integer, List<Integer>>> process = f.getResult();
        printProcess(process, tableList);
    }

    public static void louvain(double[][] G, int k, List<String> tableList){
        CommunityDetectionAlgorithm c = new CommunityDetectionAlgorithm(G);
        Map<Integer, List<Integer>> clusters = c.calculate();
        Map<Integer, List<String>> result = new HashMap<>();
        translateResult(clusters, result,1, tableList);
    }

    private static Map<Integer, List<String>> translateResult(Map<Integer, List<Integer>> clusters, Map<Integer, List<String>> result, int groupNum, List<String> tableList){
        System.out.println("----拆分结果：---");
        for(int num: clusters.keySet()){
            List<Integer> indexList = clusters.get(num);
            List<String> group = indexList.stream().map(l -> tableList.get(l)).collect(Collectors.toList());
            System.out.println("第"+ groupNum + "组：" + group);
            result.put(groupNum, group);
            groupNum++;
        }
        return result;
    }



    public static void printProcess(Map<Integer, Map<Integer, List<Integer>>> process, List<String> tableList){
        System.out.println("----聚类的过程----");
        for(int p: process.keySet()){
            System.out.println("第" + p +"次聚类：");
            Map<Integer, List<Integer>> map = process.get(p);
            for(int m: map.keySet()){
                List<String> t = new ArrayList<>();
                List<Integer> list = map.get(m);
                for(int l: list){
                    //fast newman算法得出的group从1开始标记！！！需要注意！！！
                    t.add(tableList.get(l-1));
                }
                System.out.println("第"+m+"组：" + t);
            }
        }
    }


    public static void main(String[] args) {

        double[][] G = new double[][]{
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7839643652561246E-4, 2.7839643652561246E-4, 0.0019466975666280419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05714285714285714, 0.05714285714285714 },
                { 0.0, 0.0, 1.3380554497041546, 0.0634907226171322, 0.006728950258433113, 0.008349020647374871, 0.005832527122043176, 0.0, 0.1508988640123525, 0.15743724213530974, 0.07965053347504078, 0.07041159812056029, 0.6908174282785178, 1.2645559482120954, 0.33033781832624026, 0.1833990741160323, 0.0, 0.30140625688020667, 0.18110978649121645, 0.0, 0.0, 0.0 },
                { 0.0, 1.3380554497041546, 0.0, 0.08890589622552744, 0.01897420918472203, 0.009612509221142963, 0.012073907580765517, 0.0, 0.1409426462237365, 0.14873480714349063, 0.06314934332507936, 0.08442115379748595, 0.8428918062410671, 1.4166923393742263, 0.3778766490436605, 0.20519487205497827, 0.0, 0.11631590857660104, 0.1308220921354034, 0.0052671324085584, 0.0, 0.0 },
                { 0.0, 0.0634907226171322, 0.08890589622552744, 0.0, 0.09767880287498527, 0.146159509202454, 0.08548268238761975, 0.0, 0.0021130480718436345, 0.0021130480718436345, 0.023174971031286212, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.006728950258433113, 0.01897420918472203, 0.09767880287498527, 0.0, 0.4539606540290535, 0.9209708895755407, 0.0, 0.001624225739848589, 0.001624225739848589, 0.007972190034762457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4066189624329159, 0.0, 0.0 },
                { 0.0, 0.008349020647374871, 0.009612509221142963, 0.146159509202454, 0.4539606540290535, 0.0, 0.516394903323532, 0.0, 0.0011061946902654867, 0.0011061946902654867, 0.005561993047508691, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.005832527122043176, 0.012073907580765517, 0.08548268238761975, 0.9209708895755407, 0.516394903323532, 0.0, 0.0, 5.230557467309015E-4, 5.230557467309015E-4, 0.00611819235225956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5867243867243868, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.618146395769552E-4, 3.618146395769552E-4, 0.002178447276940904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 2.7839643652561246E-4, 0.1508988640123525, 0.1409426462237365, 0.0021130480718436345, 0.001624225739848589, 0.0011061946902654867, 5.230557467309015E-4, 3.618146395769552E-4, 0.0, 1.481090599951421, 0.042405665363069445, 0.011884787472035795, 0.13758970551843605, 0.13512993262752646, 0.14274132252343552, 0.14570230607966458, 0.00488599348534202, 0.1487125591171834, 0.14373601789709173, 5.288796102992345E-4, 0.0, 0.0 },
                { 2.7839643652561246E-4, 0.15743724213530974, 0.14873480714349063, 0.0021130480718436345, 0.001624225739848589, 0.0011061946902654867, 5.230557467309015E-4, 3.618146395769552E-4, 1.481090599951421, 0.0, 0.042405665363069445, 0.011884787472035795, 0.13758970551843605, 0.13512993262752646, 0.14274132252343552, 0.14570230607966458, 0.00488599348534202, 0.1487125591171834, 0.14373601789709173, 5.288796102992345E-4, 0.0, 0.0 },
                { 0.0019466975666280419, 0.07965053347504078, 0.06314934332507936, 0.023174971031286212, 0.007972190034762457, 0.005561993047508691, 0.00611819235225956, 0.002178447276940904, 0.042405665363069445, 0.042405665363069445, 0.0, 0.01969872537659328, 0.028556319407720784, 0.03460602855631941, 0.026144896879957698, 0.019037546271813855, 0.015359999999999999, 0.019337887545980034, 0.0, 0.0024101969872537665, 5.561993047508691E-4, 5.561993047508691E-4 },
                { 0.0, 0.07041159812056029, 0.08442115379748595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011884787472035795, 0.011884787472035795, 0.01969872537659328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.6908174282785178, 0.8428918062410671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13758970551843605, 0.13758970551843605, 0.028556319407720784, 0.0, 0.0, 0.9154771475543534, 0.2437545482354976, 0.2289165443095669, 0.0, 0.13761713520749666, 0.1583975346687211, 0.0, 0.0, 0.0 },
                { 0.0, 1.2645559482120954, 1.4166923393742263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13512993262752646, 0.13512993262752646, 0.03460602855631941, 0.0, 0.9154771475543534, 0.0, 0.4174638956046289, 0.2330969863168342, 0.0, 0.1325425477050026, 0.23438546128096674, 0.0, 0.0, 0.0 },
                { 0.0, 0.33033781832624026, 0.3778766490436605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274132252343552, 0.14274132252343552, 0.026144896879957698, 0.0, 0.2437545482354976, 0.4174638956046289, 0.0, 0.3786793986801441, 0.0, 0.1397498640565525, 0.1612296110414053, 0.0, 0.0, 0.0 },
                { 0.0, 0.1833990741160323, 0.20519487205497827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14570230607966458, 0.14570230607966458, 0.019037546271813855, 0.0, 0.2289165443095669, 0.2330969863168342, 0.3786793986801441, 0.0, 0.0, 0.14643874643874644, 0.17019867549668877, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00488599348534202, 0.00488599348534202, 0.015359999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.30140625688020667, 0.11631590857660104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1487125591171834, 0.1487125591171834, 0.019337887545980034, 0.0, 0.13761713520749666, 0.1325425477050026, 0.1397498640565525, 0.14643874643874644, 0.0, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0 },
                { 0.0, 0.18110978649121645, 0.1308220921354034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14373601789709173, 0.14373601789709173, 0.0, 0.0, 0.1583975346687211, 0.23438546128096674, 0.1612296110414053, 0.17019867549668877, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0052671324085584, 0.0, 0.4066189624329159, 0.0, 0.5867243867243868, 0.0, 5.288796102992345E-4, 5.288796102992345E-4, 0.0024101969872537665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0 }
        };

        //将共享度高的表周围的权重进行调整后的G
        double[][] GadjustWeight = new double[][]{
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.5679287305122496E-5, 5.5679287305122496E-5, 0.0019466975666280419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05714285714285714, 0.05714285714285714 },
                { 0.0, 0.0, 1.3380554497041546, 0.012698144523426443, 0.0013457900516866226, 0.0016698041294749744, 0.0011665054244086352, 0.0, 0.0060359545604941, 0.00629748968541239, 0.015930106695008158, 0.014082319624112058, 0.13816348565570355, 0.2529111896424191, 0.06606756366524806, 0.03667981482320646, 0.0, 0.06028125137604134, 0.03622195729824329, 0.0, 0.0, 0.0 },
                { 0.0, 1.3380554497041546, 0.0, 0.01778117924510549, 0.0037948418369444063, 0.0019225018442285927, 0.0024147815161531037, 0.0, 0.005637705848949461, 0.005949392285739626, 0.012629868665015873, 0.01688423075949719, 0.16857836124821343, 0.2833384678748453, 0.0755753298087321, 0.04103897441099566, 0.0, 0.02326318171532021, 0.026164418427080685, 0.00105342648171168, 0.0, 0.0 },
                { 0.0, 0.012698144523426443, 0.01778117924510549, 0.0, 0.09767880287498527, 0.146159509202454, 0.08548268238761975, 0.0, 4.226096143687269E-4, 4.226096143687269E-4, 0.023174971031286212, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0013457900516866226, 0.0037948418369444063, 0.09767880287498527, 0.0, 0.4539606540290535, 0.9209708895755407, 0.0, 3.2484514796971784E-4, 3.2484514796971784E-4, 0.007972190034762457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4066189624329159, 0.0, 0.0 },
                { 0.0, 0.0016698041294749744, 0.0019225018442285927, 0.146159509202454, 0.4539606540290535, 0.0, 0.516394903323532, 0.0, 2.2123893805309734E-4, 2.2123893805309734E-4, 0.005561993047508691, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0011665054244086352, 0.0024147815161531037, 0.08548268238761975, 0.9209708895755407, 0.516394903323532, 0.0, 0.0, 1.0461114934618031E-4, 1.0461114934618031E-4, 0.00611819235225956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5867243867243868, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.236292791539105E-5, 7.236292791539105E-5, 0.002178447276940904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 5.5679287305122496E-5, 0.0060359545604941, 0.005637705848949461, 4.226096143687269E-4, 3.2484514796971784E-4, 2.2123893805309734E-4, 1.0461114934618031E-4, 7.236292791539105E-5, 0.0, 1.481090599951421, 0.008481133072613889, 0.002376957494407159, 0.027517941103687212, 0.027025986525505294, 0.028548264504687105, 0.029140461215932917, 9.77198697068404E-4, 0.02974251182343668, 0.028747203579418346, 1.0577592205984691E-4, 0.0, 0.0 },
                { 5.5679287305122496E-5, 0.00629748968541239, 0.005949392285739626, 4.226096143687269E-4, 3.2484514796971784E-4, 2.2123893805309734E-4, 1.0461114934618031E-4, 7.236292791539105E-5, 1.481090599951421, 0.0, 0.008481133072613889, 0.002376957494407159, 0.027517941103687212, 0.027025986525505294, 0.028548264504687105, 0.029140461215932917, 9.77198697068404E-4, 0.02974251182343668, 0.028747203579418346, 1.0577592205984691E-4, 0.0, 0.0 },
                { 0.0019466975666280419, 0.015930106695008158, 0.012629868665015873, 0.023174971031286212, 0.007972190034762457, 0.005561993047508691, 0.00611819235225956, 0.002178447276940904, 0.008481133072613889, 0.008481133072613889, 0.0, 0.01969872537659328, 0.028556319407720784, 0.03460602855631941, 0.026144896879957698, 0.019037546271813855, 0.015359999999999999, 0.019337887545980034, 0.0, 0.0024101969872537665, 5.561993047508691E-4, 5.561993047508691E-4 },
                { 0.0, 0.014082319624112058, 0.01688423075949719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002376957494407159, 0.002376957494407159, 0.01969872537659328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.13816348565570355, 0.16857836124821343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027517941103687212, 0.027517941103687212, 0.028556319407720784, 0.0, 0.0, 0.9154771475543534, 0.2437545482354976, 0.2289165443095669, 0.0, 0.13761713520749666, 0.1583975346687211, 0.0, 0.0, 0.0 },
                { 0.0, 0.2529111896424191, 0.2833384678748453, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027025986525505294, 0.027025986525505294, 0.03460602855631941, 0.0, 0.9154771475543534, 0.0, 0.4174638956046289, 0.2330969863168342, 0.0, 0.1325425477050026, 0.23438546128096674, 0.0, 0.0, 0.0 },
                { 0.0, 0.06606756366524806, 0.0755753298087321, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028548264504687105, 0.028548264504687105, 0.026144896879957698, 0.0, 0.2437545482354976, 0.4174638956046289, 0.0, 0.3786793986801441, 0.0, 0.1397498640565525, 0.1612296110414053, 0.0, 0.0, 0.0 },
                { 0.0, 0.03667981482320646, 0.04103897441099566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.029140461215932917, 0.029140461215932917, 0.019037546271813855, 0.0, 0.2289165443095669, 0.2330969863168342, 0.3786793986801441, 0.0, 0.0, 0.14643874643874644, 0.17019867549668877, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.77198697068404E-4, 9.77198697068404E-4, 0.015359999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.06028125137604134, 0.02326318171532021, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02974251182343668, 0.02974251182343668, 0.019337887545980034, 0.0, 0.13761713520749666, 0.1325425477050026, 0.1397498640565525, 0.14643874643874644, 0.0, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0 },
                { 0.0, 0.03622195729824329, 0.026164418427080685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.028747203579418346, 0.028747203579418346, 0.0, 0.0, 0.1583975346687211, 0.23438546128096674, 0.1612296110414053, 0.17019867549668877, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.00105342648171168, 0.0, 0.4066189624329159, 0.0, 0.5867243867243868, 0.0, 1.0577592205984691E-4, 1.0577592205984691E-4, 0.0024101969872537665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.561993047508691E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0 }
        };

        //提前摘出共享度高的表之后的G
        double[][] GwithoutSharedTables = new double[][]{
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05714285714285714, 0.05714285714285714 },
                { 0.0, 0.0, 0.09767880287498527, 0.146159509202454, 0.08548268238761975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.09767880287498527, 0.0, 0.4539606540290535, 0.9209708895755407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4066189624329159, 0.0, 0.0 },
                { 0.0, 0.146159509202454, 0.4539606540290535, 0.0, 0.516394903323532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.08548268238761975, 0.9209708895755407, 0.516394903323532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5867243867243868, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9154771475543534, 0.2437545482354976, 0.2289165443095669, 0.0, 0.13761713520749666, 0.1583975346687211, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9154771475543534, 0.0, 0.4174638956046289, 0.2330969863168342, 0.0, 0.1325425477050026, 0.23438546128096674, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2437545482354976, 0.4174638956046289, 0.0, 0.3786793986801441, 0.0, 0.1397498640565525, 0.1612296110414053, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2289165443095669, 0.2330969863168342, 0.3786793986801441, 0.0, 0.0, 0.14643874643874644, 0.17019867549668877, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13761713520749666, 0.1325425477050026, 0.1397498640565525, 0.14643874643874644, 0.0, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1583975346687211, 0.23438546128096674, 0.1612296110414053, 0.17019867549668877, 0.0, 0.16797385620915034, 0.0, 0.0, 0.0, 0.0 },
                { 0.0, 0.0, 0.4066189624329159, 0.0, 0.5867243867243868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2 },
                { 0.05714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0 }
        };

       //矩阵index与数组index对应
        String[] tableStrings = {
                "sys_dict",
                "sys_user",
                "sys_office",
                "sys_area",
                "sys_role",
                "sys_user_role",
                "sys_role_office",
                "sys_menu",
                "oa_notify",
                "oa_notify_record",
                "sys_log",
                "oa_test_audit",
                "cms_article",
                "cms_category",
                "cms_site",
                "cms_article_data",
                "cms_comment",
                "cms_guestbook",
                "cms_link",
                "sys_role_menu",
                "gen_table",
                "gen_scheme"
        };
        List<String> tableList = Arrays.asList(tableStrings);

        //摘出共享度高的表
        String[] tableStrings2 = {
                "sys_dict",
                "sys_area",
                "sys_role",
                "sys_user_role",
                "sys_role_office",
                "sys_menu",
                "oa_test_audit",
                "cms_article",
                "cms_category",
                "cms_site",
                "cms_article_data",
                "cms_comment",
                "cms_guestbook",
                "cms_link",
                "sys_role_menu",
                "gen_table",
                "gen_scheme"
        };
        List<String> tableList2 = Arrays.asList(tableStrings2);

//        fastNewman(GadjustWeight, 7, tableList);
        louvain(G, 10, tableList);
//        louvain(GwithoutSharedTables, 10, tableList2);

        // 谱聚类不能呢共有独立的点，且必须是对称矩阵
//        preProcess(GwithoutSharedTables);
//        spectralClusterint(GwithoutSharedTables, 7, tableList2);
    }


    public static void preProcess(double[][] G){
        int n = G.length;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(G[i][j] == 0){
                    G[i][j] = 0.0000001;
                    G[j][i] = 0.0000001;
                }
            }
        }
    }


}
