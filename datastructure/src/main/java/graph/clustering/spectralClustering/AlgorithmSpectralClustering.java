package graph.clustering.spectralClustering;

import smile.clustering.SpectralClustering;

import java.util.*;

public class AlgorithmSpectralClustering {

    public static void spectralClustering(double[][] G, int k, Map<Integer, List<Integer>> clusters){
        SpectralClustering sc = new SpectralClustering(G, k);
//        Map<Integer, List<Integer>> clusters = new HashMap<>();
        for(int i = 0; i < sc.getNumClusters(); i ++){
            clusters.put(i, new ArrayList<Integer>());
        }
        int[] lables = sc.getClusterLabel();
        for(int i = 0; i < lables.length; i++){
            clusters.get(lables[i]).add(i);
        }
//        System.out.println(clusters);
    }


    public static double[][] mockData1() {

        double G[][] = new double[8][8];
        G[0][1] = 3;
        G[0][2] = 3;
        G[0][3] = 3;
        G[1][2] = 3;
        G[1][3] = 3;
        G[1][7] = 1;
        G[2][3] = 3;
        G[4][5] = 3;
        G[4][6] = 2;
        G[4][7] = 2;
        G[5][6] = 2;
        G[5][7] = 2;

        G[1][0] = 3;
        G[2][0] = 3;
        G[3][0] = 3;
        G[2][1] = 3;
        G[3][1] = 3;
        G[7][1] = 1;
        G[3][2] = 3;
        G[5][4] = 3;
        G[6][4] = 2;
        G[7][4] = 2;
        G[6][5] = 2;
        G[7][5] = 2;

        return G;

    }

    public static double[][] mockData2() {

        double[][] G = {{0.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0},
                {12.0, 0.0, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 12.0, 12.0, 452.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 12.0},
                {0.0, 447.3, 0.0, 20070.0, 1510.0, 150.0, 150.0, 150.0, 447.3, 1834.0, 200.0, 200.0, 1100.0, 6550.0, 18010.0, 2160.0, 400.0, 968.3000000000001, 3200.0, 1100.0, 442.3, 442.3},
                {0.0, 447.3, 20070.0, 0.0, 1860.0, 680.0, 150.0, 290.0, 447.3, 1344.0, 200.0, 200.0, 1100.0, 7050.0, 17410.0, 2160.0, 400.0, 968.3000000000001, 50.0, 50.0, 140.0, 442.3},
                {0.0, 447.3, 1510.0, 1860.0, 0.0, 225.0, 345.0, 225.0, 447.3, 164.0, 164.0, 1240.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 442.3, 442.3},
                {0.0, 447.3, 150.0, 680.0, 225.0, 0.0, 150.0, 290.0, 447.3, 124.0, 124.0, 904.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 140.0, 442.3},
                {0.0, 447.3, 150.0, 150.0, 345.0, 150.0, 0.0, 150.0, 447.3, 14.0, 14.0, 464.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 442.3},
                {0.0, 447.3, 150.0, 290.0, 225.0, 290.0, 150.0, 0.0, 447.3, 12.0, 12.0, 784.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 140.0, 442.3},
                {0.0, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 0.0, 12.0, 12.0, 354.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 442.3},
                {0.0, 12.0, 1834.0, 1344.0, 164.0, 124.0, 14.0, 12.0, 12.0, 0.0, 2170.0, 2584.0, 220.0, 300.0, 420.0, 540.0, 300.0, 50.0, 650.0, 50.0, 12.0, 442.3},
                {0.0, 12.0, 200.0, 200.0, 164.0, 124.0, 14.0, 12.0, 12.0, 2170.0, 0.0, 2584.0, 220.0, 300.0, 420.0, 540.0, 300.0, 50.0, 650.0, 50.0, 12.0, 442.3},
                {12.0, 452.0, 200.0, 200.0, 1240.0, 904.0, 464.0, 784.0, 354.0, 2584.0, 2584.0, 0.0, 220.0, 990.0, 1430.0, 1210.0, 290.0, 470.0, 650.0, 968.3000000000001, 342.0, 12.0},
                {0.0, 0.0, 1100.0, 1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 220.0, 220.0, 220.0, 0.0, 558.6, 558.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 6550.0, 7050.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 300.0, 300.0, 990.0, 558.6, 0.0, 7050.0, 300.0, 150.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                {0.0, 0.0, 18010.0, 17410.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 420.0, 420.0, 1430.0, 558.6, 7050.0, 0.0, 2160.0, 400.0, 968.3000000000001, 50.0, 1100.0, 0.0, 0.0},
                {0.0, 0.0, 2160.0, 2160.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 540.0, 540.0, 1210.0, 0.0, 300.0, 2160.0, 0.0, 400.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                {0.0, 0.0, 400.0, 400.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 300.0, 300.0, 290.0, 0.0, 150.0, 400.0, 400.0, 0.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                {0.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 50.0, 50.0, 470.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 0.0, 968.3000000000001, 968.3000000000001, 0.0, 0.0},
                {0.0, 0.0, 3200.0, 50.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 650.0, 650.0, 650.0, 0.0, 50.0, 50.0, 50.0, 50.0, 968.3000000000001, 0.0, 50.0, 0.0, 0.0},
                {0.0, 0.0, 1100.0, 50.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 50.0, 50.0, 968.3000000000001, 0.0, 50.0, 1100.0, 50.0, 50.0, 968.3000000000001, 50.0, 0.0, 0.0, 0.0},
                {0.0, 442.3, 442.3, 140.0, 442.3, 140.0, 442.3, 140.0, 442.3, 12.0, 12.0, 342.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3},
                {12.0, 12.0, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 0.0}};
        return G;

    }


    public static double[][] mockData3() {

        double G[][] =
                {{0.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0},
                        {12.0, 0.0, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 12.0, 12.0, 452.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 12.0},
                        {0.0, 447.3, 0.0, 20070.0, 1510.0, 150.0, 150.0, 150.0, 447.3, 1834.0, 200.0, 200.0, 1100.0, 6550.0, 18010.0, 2160.0, 400.0, 968.3000000000001, 3200.0, 1100.0, 442.3, 442.3},
                        {0.0, 447.3, 20070.0, 0.0, 1860.0, 680.0, 150.0, 290.0, 447.3, 1344.0, 200.0, 200.0, 1100.0, 7050.0, 17410.0, 2160.0, 400.0, 968.3000000000001, 50.0, 50.0, 140.0, 442.3},
                        {0.0, 447.3, 1510.0, 1860.0, 0.0, 225.0, 345.0, 225.0, 447.3, 164.0, 164.0, 1240.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 442.3, 442.3},
                        {0.0, 447.3, 150.0, 680.0, 225.0, 0.0, 150.0, 290.0, 447.3, 124.0, 124.0, 904.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 140.0, 442.3},
                        {0.0, 447.3, 150.0, 150.0, 345.0, 150.0, 0.0, 150.0, 447.3, 14.0, 14.0, 464.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 442.3},
                        {0.0, 447.3, 150.0, 290.0, 225.0, 290.0, 150.0, 0.0, 447.3, 12.0, 12.0, 784.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 140.0, 442.3},
                        {0.0, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 447.3, 0.0, 12.0, 12.0, 354.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 442.3},
                        {0.0, 12.0, 1834.0, 1344.0, 164.0, 124.0, 14.0, 12.0, 12.0, 0.0, 2170.0, 2584.0, 220.0, 300.0, 420.0, 540.0, 300.0, 50.0, 650.0, 50.0, 12.0, 442.3},
                        {0.0, 12.0, 200.0, 200.0, 164.0, 124.0, 14.0, 12.0, 12.0, 2170.0, 0.0, 2584.0, 220.0, 300.0, 420.0, 540.0, 300.0, 50.0, 650.0, 50.0, 12.0, 442.3},
                        {12.0, 452.0, 200.0, 200.0, 1240.0, 904.0, 464.0, 784.0, 354.0, 2584.0, 2584.0, 0.0, 220.0, 990.0, 1430.0, 1210.0, 290.0, 470.0, 650.0, 968.3000000000001, 342.0, 12.0},
                        {0.0, 0.0, 1100.0, 1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 220.0, 220.0, 220.0, 0.0, 558.6, 558.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 6550.0, 7050.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 300.0, 300.0, 990.0, 558.6, 0.0, 7050.0, 300.0, 150.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                        {0.0, 0.0, 18010.0, 17410.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 420.0, 420.0, 1430.0, 558.6, 7050.0, 0.0, 2160.0, 400.0, 968.3000000000001, 50.0, 1100.0, 0.0, 0.0},
                        {0.0, 0.0, 2160.0, 2160.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 540.0, 540.0, 1210.0, 0.0, 300.0, 2160.0, 0.0, 400.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                        {0.0, 0.0, 400.0, 400.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 300.0, 300.0, 290.0, 0.0, 150.0, 400.0, 400.0, 0.0, 968.3000000000001, 50.0, 50.0, 0.0, 0.0},
                        {0.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 50.0, 50.0, 470.0, 0.0, 968.3000000000001, 968.3000000000001, 968.3000000000001, 968.3000000000001, 0.0, 968.3000000000001, 968.3000000000001, 0.0, 0.0},
                        {0.0, 0.0, 3200.0, 50.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 650.0, 650.0, 650.0, 0.0, 50.0, 50.0, 50.0, 50.0, 968.3000000000001, 0.0, 50.0, 0.0, 0.0},
                        {0.0, 0.0, 1100.0, 50.0, 968.3000000000001, 0.0, 0.0, 0.0, 0.0, 50.0, 50.0, 968.3000000000001, 0.0, 50.0, 1100.0, 50.0, 50.0, 968.3000000000001, 50.0, 0.0, 0.0, 0.0},
                        {0.0, 442.3, 442.3, 140.0, 442.3, 140.0, 442.3, 140.0, 442.3, 12.0, 12.0, 342.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3},
                        {12.0, 12.0, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 442.3, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 442.3, 0.0}};

        return G;
    }

    public static double[][] mockData4() {

        double G[][] =
                {{0.0 ,0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0 ,12.0, 452.0, 0.0 ,0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 12.0, 12.0},
                        {0.0, 0.0, 20070.0, 1510.0, 150.0, 150.0 ,150.0 ,0.0 ,1834.0, 200.0, 200.0, 0.0 ,1100.0, 6550.0 ,18010.0, 2160.0, 400.0, 3200.0, 1100.0, 0.0, 0.0 ,0.0},
                        {0.0 ,20070.0, 0.0 ,1860.0 ,680.0 ,150.0, 290.0 ,0.0, 1344.0 ,200.0, 200.0, 0.0, 1100.0 ,7050.0, 17410.0 ,2160.0 ,400.0 ,50.0 ,50.0 ,140.0 ,0.0 ,0.0},
                        {0.0 ,1510.0 ,1860.0, 0.0 ,225.0, 345.0 ,225.0, 0.0 ,164.0, 164.0 ,1240.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0},
                        {0.0 ,150.0, 680.0 ,225.0, 0.0 ,150.0 ,290.0, 0.0 ,124.0 ,124.0, 904.0, 0.0 ,0.0 ,0.0, 0.0,0.0, 0.0, 0.0, 0.0, 140.0, 0.0 ,0.0},
                        {0.0, 150.0, 150.0, 345.0 ,150.0 ,0.0 ,150.0 ,0.0, 14.0 ,14.0 ,464.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0},
                        {0.0 ,150.0, 290.0, 225.0, 290.0 ,150.0 ,0.0 ,0.0 ,12.0, 12.0, 784.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0, 0.0 ,0.0,140.0 ,0.0 ,0.0},
                        {0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,12.0 ,12.0, 354.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0, 0.0, 0.0},
                        {12.0 ,1834.0, 1344.0 ,164.0, 124.0 ,14.0, 12.0, 12.0 ,0.0, 2170.0, 2584.0, 50.0 ,220.0 ,300.0 ,420.0 ,540.0 ,300.0 ,650.0, 50.0 ,12.0 ,0.0 ,0.0},
                        {12.0, 200.0, 200.0, 164.0 ,124.0 ,14.0 ,12.0, 12.0 ,2170.0 ,0.0 ,2584.0, 50.0 ,220.0 ,300.0 ,420.0, 540.0, 300.0 ,650.0, 50.0 ,12.0, 0.0 ,0.0},
                        {452.0 ,200.0, 200.0, 1240.0, 904.0 ,464.0, 784.0, 354.0 ,2584.0, 2584.0 ,0.0, 470.0, 220.0, 990.0, 1430.0 ,1210.0, 290.0, 650.0, 0.0 ,342.0 ,12.0, 12.0},
                        {0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0 ,50.0, 50.0 ,470.0, 0.0 ,0.0, 0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0},
                        {0.0 ,1100.0, 1100.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0, 220.0 ,220.0, 220.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0},
                        {0.0 ,6550.0, 7050.0 ,0.0 ,0.0 ,0.0 ,0.0, 0.0 ,300.0 ,300.0 ,990.0, 0.0, 0.0 ,0.0, 7050.0, 300.0, 150.0 ,50.0, 50.0 ,0.0, 0.0 ,0.0},
                        {0.0 ,18010.0 ,17410.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 420.0 ,420.0, 1430.0 ,0.0 ,0.0, 7050.0 ,0.0 ,2160.0, 400.0 ,50.0 ,1100.0 ,0.0, 0.0 ,0.0},
                        {0.0, 2160.0 ,2160.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0, 540.0 ,540.0 ,1210.0, 0.0 ,0.0 ,300.0 ,2160.0 ,0.0, 400.0, 50.0, 50.0 ,0.0, 0.0 ,0.0},
                        {0.0 ,400.0, 400.0, 0.0, 0.0, 0.0 ,0.0 ,0.0, 300.0, 300.0 ,290.0 ,0.0, 0.0 ,150.0 ,400.0 ,400.0 ,0.0 ,50.0, 50.0 ,0.0 ,0.0, 0.0},
                        {0.0, 3200.0 ,50.0 ,0.0 ,0.0 ,0.0, 0.0, 0.0, 650.0 ,650.0 ,650.0, 0.0, 0.0, 50.0, 50.0, 50.0 ,50.0 ,0.0 ,50.0 ,0.0 ,0.0, 0.0},
                        {0.0 ,1100.0 ,50.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,50.0, 50.0 ,0.0, 0.0 ,0.0 ,50.0, 1100.0, 50.0 ,50.0, 50.0, 0.0 ,0.0 ,0.0, 0.0},
                        {0.0, 0.0 ,140.0, 0.0 ,140.0 ,0.0 ,140.0 ,0.0 ,12.0 ,12.0 ,342.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0},
                        {12.0, 0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0, 0.0, 12.0, 0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0 ,0.0, 0.0, 0.0 ,12.0},
                        {12.0, 0.0 ,0.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0 ,0.0 ,12.0 ,0.0 ,0.0, 0.0 ,0.0, 0.0, 0.0, 0.0 ,0.0, 0.0, 12.0, 0.0}};

        return G;
    }

    public static void main(String[] args) {

//    	double G[][] = mockData1();
//    	double G[][] = mockData2();
//        double G[][] = mockData3();
        double G[][] = mockData4();

        AlgorithmSpectralClustering sw = new AlgorithmSpectralClustering();
        Map<Integer, List<Integer>> clusters = new HashMap<>();
        sw.spectralClustering(G, 4, clusters);
        Iterator<Integer> iterator = clusters.keySet().iterator();

        while (iterator.hasNext()) {
            int subGraghNo = iterator.next();
            List<Integer> subNodeList = clusters.get(subGraghNo);

            System.out.print("MicroService" + subGraghNo + ": ");
            for (Integer tmp : subNodeList) {
                System.out.print(tmp + ", ");
            }
            System.out.println();
        }


        clusters = new HashMap<>();
        double G2[][] = mockData4();
        sw.spectralClustering(G2, 4, clusters);
        iterator = clusters.keySet().iterator();

        while (iterator.hasNext()) {
            int subGraghNo = iterator.next();
            List<Integer> subNodeList = clusters.get(subGraghNo);

            System.out.print("MicroService" + subGraghNo + ": ");
            for (Integer tmp : subNodeList) {
                System.out.print(tmp + ", ");
            }
            System.out.println();
        }
    }

}
